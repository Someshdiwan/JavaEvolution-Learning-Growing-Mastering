Constructors of Vector in Java

Introduction
------------
Vector is a legacy class in Java (introduced in JDK 1.0) that implements the List interface.
It provides four main constructors to create different types of vectors.

---

1. Vector()
-----------
- Creates an empty vector with an **initial capacity of 10**.
- When capacity is exceeded, it doubles by default.

Code Example:
import java.util.*;

public class VectorDemo1 {
    public static void main(String[] args) {
        Vector<Integer> v1 = new Vector<>();  // default capacity = 10
        v1.add(100);
        v1.add(200);

        System.out.println("Vector v1: " + v1);
        System.out.println("Capacity: " + v1.capacity()); // prints 10
    }
}

---

2. Vector(int initialCapacity)
------------------------------
- Creates a vector with the specified **initial capacity**.
- Useful if you know how many elements you’ll store to avoid resizing.

Code Example:
import java.util.*;

public class VectorDemo2 {
    public static void main(String[] args) {
        Vector<String> v2 = new Vector<>(5);  // initial capacity = 5
        v2.add("A");
        v2.add("B");

        System.out.println("Vector v2: " + v2);
        System.out.println("Capacity: " + v2.capacity()); // prints 5
    }
}

---

3. Vector(int initialCapacity, int capacityIncrement)
-----------------------------------------------------
- Creates a vector with a specified **initial capacity**.
- Defines how much the vector grows when capacity is exceeded (instead of default doubling).
- Example: If increment = 3, capacity grows by +3 each time.

Code Example:
import java.util.*;

public class VectorDemo3 {
    public static void main(String[] args) {
        Vector<Integer> v3 = new Vector<>(2, 3);  // capacity = 2, increment = 3
        v3.add(10);
        v3.add(20);
        v3.add(30);  // capacity increases to 5 (2 + 3)

        System.out.println("Vector v3: " + v3);
        System.out.println("Capacity: " + v3.capacity()); // prints 5
    }
}

---

4. Vector(Collection<? extends E> c)
------------------------------------
- Creates a vector containing all elements of the given collection.
- Copies elements in the same order as the collection.

Code Example:
import java.util.*;

public class VectorDemo4 {
    public static void main(String[] args) {
        List<String> list = Arrays.asList("X", "Y", "Z");
        Vector<String> v4 = new Vector<>(list);

        System.out.println("Vector v4: " + v4); // [X, Y, Z]
        System.out.println("Capacity: " + v4.capacity());
        // At least size of collection, implementation dependent
    }
}

---

Summary
----------
- Vector() → Default capacity = 10.
- Vector(int capacity) → Custom initial capacity.
- Vector(int capacity, int increment) → Custom capacity & growth increment.
- Vector(Collection c) → Copy from another collection.
