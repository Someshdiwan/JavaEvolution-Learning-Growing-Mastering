ðŸ”¹ Functional Interface in Java:
	1.	Definition
	â€¢	A Functional Interface is an interface that contains exactly one abstract method.
	â€¢	It can have multiple default or static methods, but only one abstract method.
	â€¢	They are the foundation for Lambda Expressions.

	2.	Annotation
	â€¢	Marked with @FunctionalInterface annotation (optional, but recommended).
	â€¢	Compiler enforces that only one abstract method is present.

	3.	Why Functional Interface?
	â€¢	Lambda expressions need a target type (something to map them to).
	â€¢	Functional Interfaces provide that single abstract method â†’ so lambda knows what to implement.

	4.	Examples of Built-in Functional Interfaces (from java.util.function package):
	â€¢	Runnable â†’ void run()
	â€¢	Callable<T> â†’ T call()
	â€¢	Comparator<T> â†’ int compare(T a, T b)
	â€¢	Function<T, R> â†’ R apply(T t)
	â€¢	Predicate<T> â†’ boolean test(T t)
	â€¢	Consumer<T> â†’ void accept(T t)
	â€¢	Supplier<T> â†’ T get()

	5.	Relation with Lambdas
	â€¢	A lambda expression is just a shorter way of implementing the single abstract method of a functional interface.
	â€¢	Example: Instead of writing an anonymous class for Runnable, you just write a lambda.

	6.	Benefits
	â€¢	Reduces boilerplate code (no need for long anonymous class definitions).
	â€¢	Provides a contract for lambda expressions.
	â€¢	Improves readability, especially in APIs like Streams, where behavior (functions) is passed around.

â¸»

Quick Recap:
â€¢	Functional Interface = exactly one abstract method.
â€¢	Marked with @FunctionalInterface.
â€¢	Used as the target type for lambdas.
â€¢	Java provides many built-in ones (Predicate, Function, Supplier, Consumer).
â€¢	Enables functional programming style in Java.
