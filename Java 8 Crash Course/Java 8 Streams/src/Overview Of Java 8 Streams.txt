1. What is a Stream?
A Stream is a way to process collections of data (like List, Set, Map) in a clean and efficient way.

Think of it as a pipeline where you:

1. Take data (from a collection).
2. Perform actions (like filtering or mapping).
3. Get the result (in a new form).


2. Basic Stream Workflow:

1. Create – From a collection (e.g., list.stream()).  
2. Process – Use intermediate operations (like filter() and map()).  
3. Output – Use terminal operations (like forEach() or collect()).


3. Common Stream Operations:

| Operation     | Type           | Purpose                     |
|---------------|----------------|-----------------------------|
|  filter()     | Intermediate   | Keep specific elements.      |
|  map()        | Intermediate   | Transform each element.      |
|  sorted()     | Intermediate   | Sort elements.               |
|  forEach()    | Terminal       | Perform action on elements.  |
|  collect()    | Terminal       | Gather results in a new list.|
|  count()      | Terminal       | Count elements.              |


4. Simple Examples:

1. Filter Example: (Get even numbers)

List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);
numbers.stream()
       .filter(n -> n % 2 == 0)
       .forEach(System.out::println);

Output:
2  
4

2. Map Example: (Square each number)

List<Integer> numbers = Arrays.asList(1, 2, 3);
numbers.stream()
       .map(n -> n * n)
       .forEach(System.out::println);

Output:
1  
4  
9

5. Parallel Stream (Faster Execution):

Use parallelStream() to process data in parallel for large datasets.

numbers.parallelStream()
       .forEach(System.out::println);

Streams are used to process collections in a clean, fast, and functional way.
