A CyclicBarrier in Java is commonly used in real-life scenarios where multiple threads must wait for each other to
reach a common synchronization point before proceeding further.

Here are some real-life use cases where CyclicBarrier can be applied:

Real-Life Use Cases of CyclicBarrier:
Online Gaming Matchmaking - Ensuring all players have joined a game before starting.
Microservices Initialization - Ensuring all microservices start before processing requests.
Stock Market Data Aggregation - Waiting for multiple data sources before executing trades.
Scientific Simulations - Synchronizing different phases of parallel simulations.
Multithreaded Data Processing - Ensuring all data chunks are processed before moving to the next stage.

import java.util.concurrent.BrokenBarrierException;
import java.util.concurrent.CyclicBarrier;

class Player implements Runnable {
    private String name;
    private CyclicBarrier barrier;

    public Player(String name, CyclicBarrier barrier) {
        this.name = name;
        this.barrier = barrier;
    }

    @Override
    public void run() {
        try {
            System.out.println(name + " is ready to play.");
            barrier.await();  // Wait for all players to be ready
            System.out.println(name + " starts playing!");
        } catch (InterruptedException | BrokenBarrierException e) {
            e.printStackTrace();
        }
    }
}

public class GameMatchmaking {
    public static void main(String[] args) {
        int totalPlayers = 4;
        CyclicBarrier barrier = new CyclicBarrier(totalPlayers, () -> System.out.println("All players are ready. Game starts now!"));

        Thread player1 = new Thread(new Player("Player 1", barrier));
        Thread player2 = new Thread(new Player("Player 2", barrier));
        Thread player3 = new Thread(new Player("Player 3", barrier));
        Thread player4 = new Thread(new Player("Player 4", barrier));

        player1.start();
        player2.start();
        player3.start();
        player4.start();
    }
}

Explanation:
Player class simulates a game player that waits for others before starting.
CyclicBarrier (totalPlayers, action) ensures all players are ready before the game starts.
Main method creates multiple threads representing players.

This code simulates a system startup where multiple subsystems
(Web Server, Database, Cache, and Messaging Service) must initialize before the system can fully start.

The CyclicBarrier ensures that all subsystems reach a common point before proceeding,
preventing partial initialization issues.

import java.util.concurrent.BrokenBarrierException;
import java.util.concurrent.CyclicBarrier;

public class Main {

    public static void main(String[] args)  {
        int numberOfSubsystems = 4;
        CyclicBarrier barrier = new CyclicBarrier(numberOfSubsystems, new Runnable() {
            @Override
            public void run() {
                System.out.println("All subsystems are up and running. System startup complete.");
            }
        });

        Thread webServerThread = new Thread(new Subsystem("Web Server", 2000, barrier));
        Thread databaseThread = new Thread(new Subsystem("Database", 4000, barrier));
        Thread cacheThread = new Thread(new Subsystem("Cache", 3000, barrier));
        Thread messagingServiceThread = new Thread(new Subsystem("Messaging Service", 3500, barrier));

        webServerThread.start();
        databaseThread.start();
        cacheThread.start();
        messagingServiceThread.start();
    }
}

class Subsystem implements Runnable {
    private String name;
    private int initializationTime;
    private CyclicBarrier barrier;

    public Subsystem(String name, int initializationTime, CyclicBarrier barrier) {
        this.name = name;
        this.initializationTime = initializationTime;
        this.barrier = barrier;
    }
    @Override
    public void run() {
        try {
            System.out.println(name + " initialization started.");
            Thread.sleep(initializationTime); // Simulate time taken to initialize
            System.out.println(name + " initialization complete.");
            barrier.await();
        } catch (InterruptedException | BrokenBarrierException e) {
            e.printStackTrace();
        }
    }
}
