Parallel Streams in Java:

One of the key benefits of Java 8 Streams is that they allow you to easily perform parallel operations
using the parallelStream() method or by converting a sequential stream to a parallel stream.

This helps in leveraging multi-core processors to improve performance.

---

How Parallel Streams Work:

When you convert a stream into a parallel stream, the stream operations are executed concurrently
by splitting the data into multiple chunks and processing them in parallel.

---

Using parallelStream() from Collections:

import java.util.Arrays;
import java.util.List;

public class ParallelStreamExample {
    public static void main(String[] args) {
        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);

        // Using parallel stream to calculate the sum of even numbers
        int sum = numbers.parallelStream()
                         .filter(x -> x % 2 == 0)
                         .mapToInt(Integer::intValue)
                         .sum();

        System.out.println("Sum of even numbers: " + sum);
    }
}

Output:
Sum of even numbers: 30

---

Converting Sequential Streams to Parallel Streams:

List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);

// Sequential Stream
long count = numbers.stream().filter(x -> x % 2 == 0).count();
System.out.println("Sequential count: " + count);

// Parallel Stream
long parallelCount = numbers.stream().parallel().filter(x -> x % 2 == 0).count();
System.out.println("Parallel count: " + parallelCount);

---

When to Use Parallel Streams:

Use parallel streams when:
1. You have large datasets.
2. The operations are independent (e.g., filtering, mapping).
3. There is no dependency between elements (i.e., the result does not rely on the order).

Avoid parallel streams if:
1. You have small datasets (overhead may make it slower).
2. The operations have side effects (e.g., modifying shared variables).
3. You need ordered results (parallel execution can disrupt the order).
