It is a situation in multi-threading where two or more threads
are blocked forever waiting for each other to release a resources.

This typically occurs when two or more threads have circular dependencies on a set of locks.
necessary conditions for a deadlock to occur in a system:

Mutual Exclusion: A resource can only be used by one thread/process at a time.
Hold and Wait: A thread holding a resource is waiting for another resource held by another thread.
No Preemption: A resource cannot be forcibly taken away from a thread holding it.
Circular Wait: A circular chain of two or more threads exists, where each thread waits for a resource held by the next.

Deadlock Prevention, Detection, and Resolution

1. Deadlock Prevention:

To prevent deadlocks, we must eliminate at least one of the four necessary conditions.

  - Breaking Mutual Exclusion
  - Make resources shareable whenever possible.
  - Example: Read-only files can be accessed by multiple processes.

  - Breaking Hold and Wait
  - Require a process to request all required resources at once (resource allocation in a single request).
  - Example: Database transactions acquire all locks before proceeding.

  - Breaking No Preemption
  - Allow resources to be preempted (taken away) from a process if needed.
  - Example: CPU scheduling can forcefully remove a process from execution.

  - Breaking Circular Wait
  - Impose an **ordering on resource requests** (number resources and require them to be requested in increasing order).
  - Example: If a process holds Resource 1, it must request Resource 2 before Resource 3.


2. Deadlock Detection:

If prevention is not feasible, we use detection mechanisms:

  - Resource Allocation Graph (RAG)
  - Used for single-instance resource systems. A cycle in the graph indicates a deadlock.

  - Wait-for Graph
  - Derived from RAG by removing resource nodes. A cycle in this graph confirms a deadlock.

  - Detection Algorithm (Banker's Algorithm for Deadlock Detection)
  - Periodically checks for circular dependencies in multi-instance resource systems.

---

3. Deadlock Resolution (Recovery):

Once a deadlock is detected, recovery strategies include:

  - Process Termination**
  - Kill one or more processes involved in the deadlock.
  - Either terminate all deadlocked processes or terminate one at a time until deadlock is resolved.

  - Resource Preemption
  - Take resources from some processes and reallocate them.
  - Requires rollback mechanisms to avoid inconsistencies.

---

Choosing the Right Strategy:

- Prevention is best if system design allows.
- Detection & Recovery are necessary in dynamic systems like OS and databases.
- Avoidance (Bankerâ€™s Algorithm) is used when processes declare maximum resource needs in advance.