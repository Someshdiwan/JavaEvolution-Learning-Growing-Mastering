name: Telegram Notifier

on:
  push:
    branches: ["**"]
    tags: ["*"]
  pull_request:
    types: [opened, reopened, synchronize, closed]
  release:
    types: [published]
  # üëá Manual trigger from the Actions tab
  workflow_dispatch:
    inputs:
      text:
        description: "Message to send to Telegram"
        required: true
      chat_id:
        description: "Optional: override TG_CHAT_ID"
        required: false
      parse_mode:
        description: "Telegram parse mode (plain|MarkdownV2|HTML)"
        required: false
        default: "plain"

concurrency:
  group: telegram-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: false

jobs:
  notify:
    runs-on: ubuntu-latest
    environment: SANDBOX

    steps:
      - name: Check out (for commit list)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build message
        id: msg
        shell: bash
        run: |
          set -euo pipefail

          REPO="${{ github.repository }}"
          ACTOR="${{ github.actor }}"
          EVENT="${{ github.event_name }}"
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          REPO_URL="${{ github.server_url }}/${{ github.repository }}"

          msg_header() {
            echo "üì£ $1
Repo: $REPO
By: $ACTOR
Ref: ${{ github.ref_name }}
Run: $RUN_URL"
  }

  if [[ "$EVENT" == "workflow_dispatch" ]]; then
  # Manual test: use the provided text as-is
  MESSAGE="$(msg_header "Manual notification")"
  MESSAGE="$MESSAGE

  ${{ github.event.inputs.text }}"

  elif [[ "$EVENT" == "push" ]]; then
  BEFORE="${{ github.event.before }}"
  AFTER="${{ github.sha }}"

  if [[ "$BEFORE" =~ ^0+$ ]]; then
  RANGE="$AFTER -n 10"
  COMMITS="$(git log --pretty=format:'- %s (%h) by %an' $RANGE | head -n 10 || true)"
  else
  COMMITS="$(git log --pretty=format:'- %s (%h) by %an' "$BEFORE..$AFTER" | head -n 10 || true)"
  fi
  [[ -z "${COMMITS:-}" ]] && COMMITS="- (no commit messages found)"

  MESSAGE="$(msg_header "New push detected")"
  MESSAGE="$MESSAGE
Last changes:
  $COMMITS

Repo: $REPO_URL"

  elif [[ "$EVENT" == "pull_request" ]]; then
  if [[ "${{ github.event.action }}" == "closed" ]]; then
  if [[ "${{ github.event.pull_request.merged }}" == "true" ]]; then
  STATUS="PR merged ‚úÖ"
  else
  STATUS="PR closed ‚ùå"
  fi
  else
  STATUS="PR updated ‚úèÔ∏è"
  fi
  MESSAGE="$(msg_header "$STATUS")"
  MESSAGE="$MESSAGE
#${{ github.event.pull_request.number }}: ${{ github.event.pull_request.title }}
  ${{ github.event.pull_request.html_url }}"

  elif [[ "$EVENT" == "release" ]]; then
  MESSAGE="$(msg_header "Release published üè∑Ô∏è")"
  MESSAGE="$MESSAGE
Tag: ${{ github.event.release.tag_name }}
Name: ${{ github.event.release.name || github.event.release.tag_name }}
  ${{ github.event.release.html_url }}"

  else
MESSAGE="$(msg_header "Event: $EVENT")"
  fi

# Export the (safely) raw text for next step
  {
    echo "text<<EOF"
    echo "$MESSAGE"
    echo "EOF"
  } >> "$GITHUB_OUTPUT"

  - name: Send to Telegram
    env:
      TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
      TG_CHAT_ID_DEFAULT: ${{ secrets.TG_CHAT_ID }}
      TEXT: ${{ steps.msg.outputs.text }}
      OVERRIDE_CHAT_ID: ${{ github.event.inputs.chat_id }}
      PARSE_MODE: ${{ github.event.inputs.parse_mode }}
    run: |
      set -euo pipefail

      # Choose chat id (manual override if provided)
      CHAT_ID="${OVERRIDE_CHAT_ID:-$TG_CHAT_ID_DEFAULT}"
      if [[ -z "$TG_BOT_TOKEN" || -z "$CHAT_ID" ]]; then
        echo "Telegram secrets missing (TG_BOT_TOKEN or TG_CHAT_ID)." >&2
        exit 1
      fi

      # Parse mode handling
      case "${PARSE_MODE:-plain}" in
        MarkdownV2|HTML) PMODE="$PARSE_MODE" ;;
        *) PMODE="" ;; # plain text
      esac

      # Build payload with jq to escape safely
      if [[ -n "$PMODE" ]]; then
        PAYLOAD="$(jq -n --arg chat_id "$CHAT_ID" --arg text "$TEXT" --arg pm "$PMODE" \
          '{chat_id:$chat_id, text:$text, parse_mode:$pm, disable_web_page_preview:true}')"
      else
        PAYLOAD="$(jq -n --arg chat_id "$CHAT_ID" --arg text "$TEXT" \
          '{chat_id:$chat_id, text:$text, disable_web_page_preview:true}')"
      fi

      curl -sS -X POST "https://api.telegram.org/bot${TG_BOT_TOKEN}/sendMessage" \
        -H 'Content-Type: application/json' \
        -d "$PAYLOAD" \
        | jq -e '.ok == true' >/dev/null

      echo "‚úÖ Message sent to Telegram."
