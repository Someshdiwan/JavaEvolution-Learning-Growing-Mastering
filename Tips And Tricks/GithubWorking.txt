1) GitHub Hierarchy

GitHub (service)
└─ Account (User or Organization)
   ├─ Repositories (repos)              ← projects
   │  ├─ Default branch (main/master)   ← main production line
   │  ├─ Feature branches               ← short-lived work
   │  ├─ Release branches / tags        ← versioned snapshots
   │  ├─ Files & folders (src/, docs/, .github/, etc.)
   │  ├─ Commits                        ← saved history
   │  ├─ Pull Requests (PRs)            ← propose merging changes
   │  ├─ Issues                         ← bugs, tasks, discussions
   │  ├─ Actions / CI workflows         ← automation, builds, tests
   │  └─ Settings                       ← permissions, protections
   ├─ Forks (personal copies of repos)
   │  ├─ origin   = your fork remote
   │  └─ upstream = original repo
   └─ Organizations (group accounts)
      ├─ Repositories
      ├─ Teams
      └─ Policies (branch protection, CI required)


⸻

2) Core Concepts
	•	Clone → copy repo from remote to local.
	•	Fork → personal remote copy on GitHub.
	•	Remote → pointer to a repo (origin, upstream).
	•	Branch → independent development line.
	•	Commit → snapshot with a message.
	•	Push → send commits to remote.
	•	Pull → fetch + merge (or rebase).
	•	Fetch → update remote refs without merging.
	•	Merge → combine changes.
	•	Rebase → reapply commits on new base.
	•	PR → request to merge changes.
	•	Squash → combine commits into one.
	•	Conflict → manual resolution needed when code overlaps.

⸻

3) Common Workflows

A — Contribute via Fork

git clone https://github.com/YourUser/repo.git
cd repo
git remote add upstream https://github.com/OriginalOwner/repo.git

git checkout -b feature-branch
# make changes
git add .
git commit -m "Describe your change"
git push origin feature-branch

Open PR: YourUser:feature-branch → OriginalOwner:main

⸻

B — Sync fork with upstream

git checkout main
git fetch upstream
git merge upstream/main      # or rebase: git rebase upstream/main
git push origin main


⸻

C — Rebase workflow (clean history)

git checkout feature-branch
git fetch upstream
git rebase upstream/main
# resolve conflicts if any
git push origin feature-branch --force-with-lease


⸻

D — Squash commits

git checkout feature-branch
git rebase -i HEAD~3   # squash last 3 commits
git push origin feature-branch --force-with-lease


⸻

E — Undo mistakes

git rebase --abort                   # stop rebase
git reset --hard origin/feature-branch  # reset local to remote
git revert <commit-hash>             # undo specific commit


⸻

4) Pull Request Etiquette
	•	Title: concise & descriptive.
	•	Description: explain clearly, follow template.
	•	Keep branch focused: one logical change.
	•	Small commits → easier review.
	•	Squash noisy commits.
	•	Keep “Allow edits by maintainers” ON.
	•	Fix CI/test issues before asking review.

⸻

5) Mini Visual Flow

Fork repo → Clone → Create branch → Commit → Push → Open PR
          → Review → Address comments → Merge into upstream


⸻
