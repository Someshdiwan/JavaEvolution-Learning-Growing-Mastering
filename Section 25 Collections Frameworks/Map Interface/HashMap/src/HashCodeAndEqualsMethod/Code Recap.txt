Code Recap:

HashMap<Person, String> map = new HashMap<>();
Person p1 = new Person("Alice", 1);
Person p2 = new Person("Bob", 2);
Person p3 = new Person("Alice", 1);

map.put(p1, "Engineer");
map.put(p2, "Designer");
map.put(p3, "Manager");

ðŸ‘‰ Yahaan hum ek `HashMap` bana rahe hain jisme **key = Person object** aur **value = Job title (String)**.
- `p1` = Alice, id=1
- `p2` = Bob, id=2
- `p3` = Alice, id=1 (same data as p1, lekin alag object)

---

Step-by-Step Internal Working:

1. **map.put(p1, "Engineer");**
   - `p1.hashCode()` calculate hua.
   - Maan lo bucket index = 5 aaya.
   - `p1` key bucket[5] me insert ho gaya â†’ value "Engineer".

   ```
   Bucket[5] â†’ (p1 -> Engineer)
   ```
---

2. **map.put(p2, "Designer");**
   - `p2.hashCode()` nikala, maan lo index = 9 aaya.
   - Key `p2` bucket[9] me store ho gaya â†’ value "Designer".

   ```
   Bucket[5] â†’ (p1 -> Engineer)
   Bucket[9] â†’ (p2 -> Designer)
   ```

---

3. **map.put(p3, "Manager");**
   - `p3.hashCode()` nikala.
   - Kyunki `p3` bhi `"Alice", 1` hai, iska hashCode same as `p1`.
   - Matlab bucket index = 5 aaya (same as p1).
   - Ab bucket[5] ke andar `equals()` check hoga:
     - `p1.equals(p3)` â†’ true (kyunki name aur id dono same).
   - Isliye HashMap ne purani value `"Engineer"` replace karke nayi value `"Manager"` daal di.

   ```
   Bucket[5] â†’ (p3 -> Manager)   // replace
   Bucket[9] â†’ (p2 -> Designer)
   ```
---

Output Behavior

System.out.println("HashMap Size: " + map.size());
// Output: 2   (p1 aur p3 same key consider hue)

System.out.println("Value for p1: " + map.get(p1));
// Output: Manager (Engineer replace ho gaya)

System.out.println("Value for p3: " + map.get(p3));
// Output: Manager

---

Dusra Example: Strings as Keys

map1.put("Shubham", 90);   // new entry
map1.put("Neha", 92);      // new entry
map1.put("Shubham", 99);   // same key â†’ replace 90 with 99
```

Resulting Map:
```
"Shubham" â†’ 99
"Neha"    â†’ 92
```

---

ASCII Flow Diagram:

Insert p1("Alice",1) â†’ hash=5 â†’ bucket[5] â†’ store (Engineer)

Insert p2("Bob",2)   â†’ hash=9 â†’ bucket[9] â†’ store (Designer)

Insert p3("Alice",1) â†’ hash=5 â†’ bucket[5]
                        |
                        |--> check equals(p1,p3) = true
                        |--> replace old value "Engineer"
                        v
                    bucket[5] â†’ (p3 -> Manager)
```


Key Takeaways:

1. **HashMap key lookup = hashCode() + equals():**
   - Pehle `hashCode()` se bucket milta hai.
   - Fir bucket ke andar `equals()` check hota hai.

2. **Duplicate Keys â†’ Replace Value**
   - Agar `hashCode()` same hai aur `equals()` true hai â†’ key same maana jaata hai aur value replace hoti hai.

3. **Why override hashCode() and equals()?**
   - Custom objects (Person) ko key banane ke liye correct equality define karna zaroori hai.
   - Nahi toh HashMap unhe alag objects treat karega, chahe data same ho.

4. **Strings Example**
   - `"Shubham"` key dobara daalne pe value overwrite ho jaati hai (90 â†’ 99).

1.	HashMap key comparison do steps me hota hai:
â€¢	Pehle hashCode() check karke bucket find karo.
â€¢	Fir bucket ke andar equals() se compare karo.

2.	Agar hashCode() aur equals() dono match ho gaye â†’ key same hai â†’ value replace ho jaati hai.
3.	Agar hashCode() same hai but equals() false hai â†’ collision handle hota hai (LinkedList/TreeNode ban ke).
4.	Isliye custom objects (Person) ko HashMap key banate time hashCode() aur equals() override karna zaroori hai.
