A constructor is used to initialize instance variables in Java for the following reasons:

Automatic Initialization When Object is Created

Instance variables belong to an object, and their values need to be assigned when the object is created.
The constructor ensures that every object gets proper initial values without requiring manual assignment after object creation.

Encapsulation & Data Integrity:

Using a constructor enforces proper data encapsulation.
It ensures that objects are always created in a valid state, preventing uninitialized or inconsistent values.

Avoids Manual Assignment for Each Object:

Without a constructor, you'd have to manually set values for each object after creating it, which is repetitive and error-prone.

Instead of:

Company emp1 = new Company();
emp1.employeeName = "Alice"; 
emp1.salary = 50000;

A constructor allows:

Company emp1 = new Company("Alice", 50000);
making code cleaner and structured.

Improves Code Readability & Maintainability

When creating multiple objects, a constructor provides a clear and consistent way to initialize them.
This improves the structure and readability of the code.
Supports Different Initialization Needs (Overloading)

Constructors can be overloaded, allowing different initialization patterns based on different requirements.

Example:

public Company(String employeeName) {
    this(employeeName, 0.0);  // Default salary
}

Conclusion:
We create a constructor to ensure proper initialization of instance variables, improve code clarity,
avoid redundant manual assignments, and maintain data integrity when creating objects.
