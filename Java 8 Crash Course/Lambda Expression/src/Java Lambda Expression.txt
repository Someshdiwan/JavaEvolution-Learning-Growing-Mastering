Java Lambda Expression Cheat Sheet

Basic Syntax:

(parameters) -> { body }

1. No Parameters

Runnable r = () -> System.out.println("Hello, World!");

Explanation:
-  ()  → No parameters.  
-  -> → Lambda arrow.  
-  System.out.println() → Action (body).

2. Single Parameter

Consumer<String> printer = name -> System.out.println(name);
printer.accept("Alice");


Explanation:
- One parameter doesn't need parentheses.  
- Uses the Consumer functional interface to print.

3. Multiple Parameters

BiFunction<Integer, Integer, Integer> sum = (a, b) -> a + b;
System.out.println(sum.apply(5, 10));


Explanation:
- Multiple parameters must be in parentheses.  
- BiFunction takes two inputs and returns a result.  

4. With Code Block (Multiple Statements)

BiFunction<Integer, Integer, Integer> sum = (a, b) -> {
    int result = a + b;
    System.out.println("Sum: " + result);
    return result;
};
sum.apply(5, 10);

Explanation:
- Use curly braces {} when the body has more than one statement.  
- Must use return if the method has a return type.  


5. Using Method Reference (Shortcut for Lambdas):
List<String> names = Arrays.asList("Alice", "Bob", "Charlie");
names.forEach(System.out::println);

Explanation:
- System.out::println is a method reference —a cleaner way to call existing methods.  
- Equivalent to:  
 
  names.forEach(name -> System.out.println(name));
 

6. With Functional Interfaces

| Functional Interface       | Parameters | Return Type | Example Lambda                  |
|----------------------------|------------|-------------|---------------------------------|
|  Runnable                  | None       | void        | () -> System.out.println("Run") |
|  Consumer<T>               | 1          | void        | x -> System.out.println(x)      |
|  Supplier<T>               | None       | T           | () -> "Hello"`                  |
|  Function<T, R>            | 1          | R           | x -> x * 2                      |
|  BiFunction<T, U, R>       | 2          | R           | (x, y) -> x + y                 |
|  Predicate<T>              | 1          | boolean     | x -> x > 10                     |


7. Common Examples:

1.Filter a List (with filter())

List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);
numbers.stream()
       .filter(n -> n % 2 == 0)
       .forEach(System.out::println);


2. Map Values (with map())

List<String> names = Arrays.asList("Alice", "Bob");
List<String> upperCaseNames = names.stream()
                                   .map(name -> name.toUpperCase())
                                   .collect(Collectors.toList());
System.out.println(upperCaseNames);


3. Sort a List:

List<String> names = Arrays.asList("Charlie", "Alice", "Bob");
names.sort((a, b) -> a.compareTo(b));
System.out.println(names);

4. Sum of Numbers (with reduce()):

List<Integer> numbers = Arrays.asList(1, 2, 3);
int sum = numbers.stream()
                 .reduce(0, (a, b) -> a + b);
System.out.println(sum);


Quick Rules:
1. 0 Parameters: () -> System.out.println("Hello"); 
2. 1 Parameter:  x -> x * 2;  
3. Multiple Parameters: (a, b) -> a + b;  
4. Return Statement: Use {} if there are **multiple statements.  
5. Method Reference: Use ClassName::methodName for simple method calls.
