1. Imports and Class Declaration

import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

- You are importing Lock and ReentrantLock from java.util.concurrent.locks.
- ReentrantLock is an advanced locking mechanism that allows a thread to acquire the same lock multiple times.

2. Defining `ReentrantExample` Class

class ReentrantExample {
    private final Lock lock = new ReentrantLock();
```

- Here, you're creating an instance of `ReentrantLock` named lock.
- This lock will be used to control access to methods inside the class.


3. Outer Method with Locking:

public void outerMethod() {
    lock.lock();  // Acquires the lock
    try {
        System.out.println("Outer Method");
        innerMethod();  // Calls the inner method
    } finally {
        lock.unlock();  // Releases the lock
    }
}

How outerMethod() Works:

1. It acquires the lock using lock.lock().
2. It prints Outer Method.
3. It calls innerMethod(), which also tries to acquire the lock.
4. Once innerMethod() completes, outerMethod() unlocks the lock in the finally block.

4. Inner Method with Locking

public void innerMethod() {
    lock.lock();  // Acquires the lock again
    try {
        System.out.println("Inner Method");
    } finally {
        lock.unlock();  // Releases the lock
    }
}

How innerMethod() Works:

1. The same thread that called outerMethod() now calls innerMethod().

2. The thread acquires the lock again (this is allowed because ReentrantLock supports reentrancy).

3. It prints Inner Method.

4. It unlocks the lock in the `finally` block.

5. Running the Code

public class Main {
    public static void main(String[] args) {
        ReentrantExample re = new ReentrantExample();
        re.outerMethod();
    }
}

What Happens When You Run It?

1. main() creates an instance of ReentrantExample.

2. outerMethod() is called:
   - It locks the resource.
   - It prints Outer Method.
   - It calls innerMethod(), which locks again.
   - It prints Inner Method.
   - innerMethod() releases its lock.
   - outerMethod() releases its lock.

What is Reentrancy?

- A reentrant lock allows the same thread to acquire the lock multiple times without blocking itself.
- Each lock.lock() must have a corresponding lock.unlock(); otherwise, the thread might never release the lock.

What Would Happen Without ReentrantLock?

- If you used a non-reentrant lock, innerMethod() would be blocked because the same thread is trying to lock an already locked resource.

Key Learnings:

✅ ReentrantLock allows the same thread to acquire the lock multiple times.
✅ Each lock.lock() must have a matching lock.unlock() to avoid deadlocks.
✅ This lock avoids deadlocks but requires careful handling.

Possible Issues and Improvements

1. What If We Forget to Unlock?

public void innerMethod() {
    lock.lock();  // Acquires the lock
    try {
        System.out.println("Inner Method");
    } 
    // Forgetting to call lock.unlock() here would cause a deadlock!
}

- The lock would never be released, leading to a deadlock where no other thread can access it.

✅ Solution: Always use try-finally to ensure unlock() is always called.

2. Why Use ReentrantLock Instead of synchronized?

- ReentrantLock provides more control compared to the synchronized keyword.
- You can try to acquire the lock with a timeout (lock.tryLock()).
- You can interrupt a thread waiting for the lock (lock.lockInterruptibly()).
- synchronized is simpler, but ReentrantLock is more flexible.

Outer Method
Inner Method

This proves that ReentrantLock allows the same thread to acquire the lock multiple times!