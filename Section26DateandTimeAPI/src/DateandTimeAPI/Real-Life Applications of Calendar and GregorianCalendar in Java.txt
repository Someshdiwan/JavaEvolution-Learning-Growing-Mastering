Real-Life Applications of Calendar and GregorianCalendar in Java:

The Calendar API (`java.util.Calendar` and `java.util.GregorianCalendar`) is widely used in
legacy Java applications for handling **dates, times, and scheduling** before Java 8 introduced `java.time`.

Although modern applications use `java.time`, some systems still rely on the `Calendar` API.

Here are some real-life applications:

1. Event Scheduling Systems üóìÔ∏è
- Used in meeting schedulers, calendars, and reminders.
- Example: Booking an appointment in a hospital or corporate meeting.

üîπ Example Use Case:
- Check if a selected date is a weekend or holiday before scheduling an event.

import java.util.Calendar;
import java.util.GregorianCalendar;

public class EventScheduler {
    public static void main(String[] args) {
        GregorianCalendar eventDate = new GregorianCalendar(2025, Calendar.MARCH, 20);
        
        int dayOfWeek = eventDate.get(Calendar.DAY_OF_WEEK);
        if (dayOfWeek == Calendar.SATURDAY || dayOfWeek == Calendar.SUNDAY) {
            System.out.println("Cannot schedule on a weekend!");
        } else {
            System.out.println("Event scheduled successfully on " + eventDate.getTime());
        }
    }
}

---

2. Payroll & HR Systems:
- Used to determine payroll cycles, calculate working days, and set payment schedules.
- Example: Calculating salary disbursement on the last working day of the month.

üîπExample Use Case:
- Find the last working day of the month for salary processing.

import java.util.Calendar;
import java.util.GregorianCalendar;

public class PayrollSystem {
    public static void main(String[] args) {
        Calendar payrollDate = new GregorianCalendar(2025, Calendar.MARCH, 1);
        payrollDate.set(Calendar.DAY_OF_MONTH, payrollDate.getActualMaximum(Calendar.DAY_OF_MONTH));

        System.out.println("Salary will be processed on: " + payrollDate.getTime());
    }
}

---

3. Banking and Finance Applications
- Used for loan processing, interest calculations, and credit card billing cycles**.
- Example: Checking if a loan repayment date falls on a bank holiday.

üîπ Example Use Case:
- If a loan repayment date is on a Sunday, shift it to the **next working day.

import java.util.Calendar;
import java.util.GregorianCalendar;

public class LoanRepayment {
    public static void main(String[] args) {
        GregorianCalendar dueDate = new GregorianCalendar(2025, Calendar.MARCH, 30);

        if (dueDate.get(Calendar.DAY_OF_WEEK) == Calendar.SUNDAY) {
            dueDate.add(Calendar.DATE, 1); // Move to next day (Monday)
        }
        System.out.println("Loan repayment due date: " + dueDate.getTime());
    }
}

---

4. Ticket Booking & Reservation Systems
- Used in airlines, railways, and hotel reservations** to check availability.
- Example: Finding the next available seat for a flight/train.

üîπ Example Use Case:
- If a user requests a ticket on a **public holiday**, show the **next available date**.  

---

5. Inventory Management & Stock Rotation
- Used in warehouses** to track product expiry dates and stock replenishment.
- Example: Checking if a perishable item expires soon.

üîπExample Use Case:

import java.util.Calendar;
import java.util.GregorianCalendar;

public class InventoryManager {
    public static void main(String[] args) {
        GregorianCalendar expiryDate = new GregorianCalendar(2025, Calendar.MARCH, 20);
        GregorianCalendar today = new GregorianCalendar();

        if (expiryDate.before(today)) {
            System.out.println("Product expired! Remove from inventory.");
        } else {
            System.out.println("Product is safe to sell. Expiry Date: " + expiryDate.getTime());
        }
    }
}

---

6. Employee Leave and Attendance Tracking:
- Used to check employee attendance and leave approval.
- Example: Calculating the number of leave days taken in a year.

üîπExample Use Case:
- Check if an employee has taken leave on a public holiday or a weekend.

---

7. Astrology & Religious Festival Calculation
- Used in Hindu Panchang, Islamic Calendar, Christian Easter Date calculations.
- Example: Finding Easter Sunday for a given year.

---

8. Customer Subscription and Membership Renewals
- Used in Netflix, Amazon Prime, Gym Memberships, etc.
- Example: Reminding users before their subscription expires.

üîπ Example Use Case:

import java.util.Calendar;
import java.util.GregorianCalendar;

public class SubscriptionReminder {
    public static void main(String[] args) {
        GregorianCalendar renewalDate = new GregorianCalendar(2025, Calendar.MARCH, 25);
        renewalDate.add(Calendar.DATE, -7); // Reminder 7 days before

        System.out.println("Send reminder on: " + renewalDate.getTime());
    }
}

---

Why Modern Applications Prefer java.time Over Calendar:

| Feature             | java.util.Calendar (Legacy)  | java.time (Modern)      |
|---------------------|------------------------------|-------------------------|
| Mutability          | Mutable (can be modified)    | Immutable (thread-safe) |
| Thread-Safety       | Not thread-safe              | Thread-safe             |
| Ease of Use         | Complex API                  | Simple API              |
| Performance         | Slower due to mutable nature | Faster                  |
| Time Zone Handling  | Complicated                  | Easier                  |


Recommendation:
If you're working on new Java projects (Java 8+), prefer using `java.time` (`LocalDate`, `ZonedDateTime`)
instead of `Calendar`.


---

Conclusion:
The Calendar API is useful for applications requiring date-time calculations, such as scheduling, payroll, banking,
inventory management, and reservations.
