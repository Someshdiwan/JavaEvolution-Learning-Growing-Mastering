What is upcasting?
Upcasting is the typecasting of a child object to a parent object. Upcasting can be done implicitly.

Upcasting gives us the flexibility to access the parent class members but it is not possible to access
all the child class members using this feature.

Instead of all the members, we can access some specified members of the child class.

For instance, we can access the overridden methods.

Example: Let there be an animal class.

There can be many different classes of animals. One such class is Fish.

So, letâ€™s assume that the fish class extends the Animal class.


double d=4.5;
int i=(int)d; //explicit typecasting 

int i1=5;
double d1=i1; //implicit type conversion

When we are talking about non-primitive data-type we have concept of upcasting and down-casting condition for

upcasting and down-casting:

-- for that two class should have some parents-child-relationship
-- if non-primitive data type-have no any relation-ship so, upcasting and down-casting is not possible.

class A{
    public void show1(){
        System.out.println("In show A)
    }
}

class B extends A{
    public void show2(){
        System.out.println("In show B");
    }
}

class Demo{
    public static void main(String []args){
        A obj =(A) new B(); //upcasting 
        obj.show1();
       
    A obj1 =new B(); // upcasting 
    // obj1.show2(); // you get error and you are not able to call show2() because with parennts reference specialised method of child is not visible
    here we downcastig to use show2() method
    ((B)obj).show2(); //downcasting
    }
}


Note:
the object can also be typecasted like the datatypes. Parent and Child objects are two types of objects.
So, there are two types of typecasting possible for an object, i.e., Parent to Child and Child to Parent or
can say Upcasting and Down-casting.
