What is Thread Safety?
Thread safety means that a piece of code or a program can be safely executed by multiple threads at the same time
without causing race conditions, data corruption, or inconsistent behavior.

Why is Thread Safety Important?
In multi-threaded applications, multiple threads share resources (e.g., variables, objects, or files).
If proper synchronization is not implemented, it can lead to:

Race Conditions: Multiple threads modifying shared data simultaneously, leading to unpredictable results.
Deadlocks: Threads waiting indefinitely for resources held by each other.
Data Inconsistency: Reading partially updated or corrupt data.
Ways to Achieve Thread Safety
Synchronization (synchronized keyword in Java)

Ensures that only one thread at a time can access a critical section (shared resource).
Using Locks (e.g., ReentrantLock)

Provides more control over locking mechanisms compared to synchronized.
Atomic Variables (e.g., AtomicInteger)

Ensures atomic (indivisible) operations without explicit locks.
Volatile Keyword (volatile in Java)

Ensures visibility of changes to variables across threads but does not guarantee atomicity.
Thread-safe Collections (e.g., ConcurrentHashMap)

Special data structures designed for multi-threading, avoiding the need for explicit synchronization.
Immutable Objects

Objects whose state cannot be changed after creation are inherently thread-safe.

Example Interview Question: How do you ensure thread safety?
Answer:

"Thread safety can be ensured using multiple techniques depending on the requirements. 

If we need to synchronize access to a shared resource, we can use the synchronized keyword or 
explicit locks like ReentrantLock. 

If we need atomic operations, we can use AtomicInteger or similar classes.

Additionally, using thread-safe collections (ConcurrentHashMap) or designing immutable objects can help avoid
concurrency issues.