In Java Streams, operations are categorized into two types: intermediate and terminal operations. 

Intermediate operations are evaluated lazily, meaning they are not executed until a terminal operation is invoked on the stream. 

Here are some common intermediate operations that are evaluated lazily:

filter: Filters elements based on a given predicate.

Stream<String> filteredStream = stream.filter(s -> s.startsWith("A"));


map: Transforms each element using a given function.

Stream<Integer> mappedStream = stream.map(String::length);


flatMap: Flattens nested streams into a single stream.

Stream<String> flatMappedStream = stream.flatMap(s -> Arrays.stream(s.split(" ")));


distinct: Removes duplicate elements.

Stream<String> distinctStream = stream.distinct();


sorted: Sorts the elements of the stream.

Stream<String> sortedStream = stream.sorted();


peek: Performs an action on each element as it is consumed.

Stream<String> peekedStream = stream.peek(System.out::println);


These intermediate operations build up a pipeline of operations that are only executed when a 
terminal operation, such as collect, forEach, or reduce, is called. This lazy evaluation allows for efficient processing and optimization of the stream operations.