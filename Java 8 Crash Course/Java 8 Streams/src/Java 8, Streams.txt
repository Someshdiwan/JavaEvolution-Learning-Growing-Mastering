In Java 8, Streams are a powerful and versatile API that allows you to process collections of
data (like List, Set, and Map) in a functional and declarative way.

They enable you to perform complex data transformations with minimal code by chaining operations together.

What is a Stream?
A Stream is a sequence of elements that you can process in a pipeline of operations.
It does not store data; instead, it works on the data from a source (like a collection, array, or I/O channel).

Key Characteristics of Streams:

Functional Style – Emphasizes the use of lambda expressions and method references for concise and readable code.
Lazy Evaluation – Operations are executed only when a terminal operation is called.
Pipeline Processing – Streams support a pipeline of operations: Source → Intermediate Operations → Terminal Operation.
No Side Effects – Streams encourage pure functions that do not modify the original data.
Parallel Execution – Can process data in parallel using the parallelStream() method.

Stream Operations:

Intermediate Operations – Transform the stream (lazy evaluation).

Examples:

filter() – Filters elements based on a condition.
map() – Transforms each element.
sorted() – Sorts elements.
Terminal Operations – Produce a result or side-effect (eager evaluation). Examples:

forEach() – Iterates over each element.
collect() – Collects results into a collection.
count() – Counts the elements.

Stream Workflow:

Create a Stream – From collections, arrays, or other data sources.
Apply Intermediate Operations – Transform or filter the stream.
Perform Terminal Operation – Generate output or apply side effects.

Example 1: Basic Stream Operations

import java.util.*;
import java.util.stream.*;

public class Java8Demo {
    public static void main(String[] args) {
        List<String> names = Arrays.asList("Alice", "Bob", "Charlie", "David");

        // Filter names starting with 'A' and print them
        names.stream()
             .filter(name -> name.startsWith("A")) // Intermediate operation
             .forEach(System.out::println);        // Terminal operation
    }
}

Output:
Alice

Example 2: Collecting Results

import java.util.*;
import java.util.stream.*;

public class Java8Demo {
    public static void main(String[] args) {
        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);

        // Collect even numbers into a new list
        List<Integer> evenNumbers = numbers.stream()
                                           .filter(n -> n % 2 == 0)
                                           .collect(Collectors.toList());

        System.out.println(evenNumbers);
    }
}

Output:
[2, 4]

Example 3: Mapping and Reducing

import java.util.*;

public class Java8Demo {
    public static void main(String[] args) {
        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);

        // Sum of all numbers using reduce()
        int sum = numbers.stream()
                         .reduce(0, Integer::sum); 

        System.out.println("Sum: " + sum);
    }
}

Output:
Sum: 15

Parallel Streams:
For large datasets, you can use parallelStream() to process data in parallel:

import java.util.*;

public class Java8Demo {
    public static void main(String[] args) {
        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);

        // Parallel Stream for faster execution
        numbers.parallelStream()
               .forEach(System.out::println);
    }
}

Advantages of Streams:
Simplifies Code – Reduces boilerplate code using functional style.
Efficient Processing – Supports lazy evaluation and parallel execution.
Better Readability – Clear and expressive pipeline for data transformations.
