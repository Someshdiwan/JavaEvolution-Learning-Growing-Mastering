Theory Behind the `Package.PropertiesDemo` Program

## 1. Introduction to `Properties` Class
- The `Properties` class is part of `java.util` and **extends `Hashtable<Object,Object>`**.
- It is specialized for working with **String keys and values**.
- Commonly used to store:
  - **Application configurations** (e.g., database settings, API keys).
  - **Metadata** (e.g., app version, environment variables).
  - **Localization resources** (via `.properties` files for i18n).

**Key Fact:**
Although it extends `Hashtable<Object,Object>`, its **API is strongly typed** for `String` keys/values using:
- `setProperty(String key, String value)`
- `getProperty(String key)`

---

## 2. Internal Structure
- `Properties` internally maintains data in a **hash table**.
- Keys and values are stored as `Object`, but APIs ensure that **only Strings** are used.
- Duplicate keys are **overwritten** (last one wins).
- Order of properties is **not guaranteed** (hash-based).

---

## 3. Setting Properties
- You add properties using `setProperty(String key, String value)`.
  Example:
  ```java
  Properties p = new Properties();
  p.setProperty("Brand Name", "Dell");
  p.setProperty("Processor", "i7");
  p.setProperty("OS", "Windows");
  p.setProperty("Model", "Latitude");

	•	Internally:
	•	Calls Hashtable.put(key, value).
	•	Keys and values are stored as Strings.

⸻

4. Storing Properties in a Text File
	•	Use store(OutputStream out, String comments).
	•	File format:
	•	Each property → key=value.
	•	Lines starting with # are comments.
	•	First # line includes timestamp metadata.

Example:

# laptop
# Sun Mar 09 01:16:17 IST 2025
Brand Name=Dell
Processor=i7
OS=Windows
Model=Latitude

Working:
	•	Iterates over the internal hashtable.
	•	Converts entries to key=value strings.
	•	Writes them line by line into the file.

⸻

5. Storing Properties in an XML File
	•	Use storeToXML(OutputStream os, String comment).
	•	Creates a structured XML file with <entry> elements.

Example Output:

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
    <comment>Properties XML File</comment>
    <entry key="Brand Name">Dell</entry>
    <entry key="Processor">i7</entry>
    <entry key="OS">Windows</entry>
    <entry key="Model">Latitude</entry>
</properties>

Working:
	•	Wraps properties in a <properties> root element.
	•	Each key-value pair becomes <entry key="...">value</entry>.
	•	Ensures UTF-8 encoding for compatibility.

⸻

6. Loading Properties
	•	Properties can be read back using:
	•	load(InputStream in) → Reads from .properties file.
	•	loadFromXML(InputStream in) → Reads from XML file.

Example:

Properties p = new Properties();
p.load(new FileInputStream("config.properties"));
String os = p.getProperty("OS");


⸻

7. Printing Properties
	•	System.out.println(p) calls toString() of Hashtable.
	•	Prints entries in {key=value, key=value} format.

⸻

8. Use Cases
	•	Configuration Management: database URL, credentials, logging levels.
	•	Internationalization (i18n): messages_en.properties, messages_fr.properties.
	•	Environment-based settings: dev/test/prod configs.
	•	Metadata files in JAR/Maven projects (pom.properties).

⸻

9. Potential Issues
	•	Spaces in Keys: Keys with spaces need escaping in .properties files (Brand\ Name=Dell).
	•	Colons & Equal Signs: Both : and = can separate key-value pairs; ambiguity possible.
	•	Null values: setProperty(key, null) will throw NullPointerException.
	•	Encoding: .properties files default to ISO-8859-1; need Unicode escapes for non-ASCII (e.g., \u0915). XML handles UTF-8 by default.
	•	Overwriting Keys: Setting the same key twice will overwrite the previous value.

⸻

10. Best Practices
	•	Always prefer getProperty(key, defaultValue) → prevents null return values.
	•	For i18n → use ResourceBundle (internally uses Properties).
	•	For modern applications, prefer UTF-8 XML storage over plain .properties.
	•	Keep sensitive properties (like DB passwords) encrypted.

⸻

11. Quick Recap
	•	Properties is a Hashtable-based class specialized for String key-value pairs.
	•	Can store data in both .properties and .xml formats.
	•	Provides easy persistence (store/load).
	•	Extremely useful for configurations, metadata, and i18n.
	•	Requires caution with encoding, special characters, and overwriting.

---
