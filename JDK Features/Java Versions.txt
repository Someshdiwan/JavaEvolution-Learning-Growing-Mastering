Java 8:
Released in March 2014, Java8 was a landmark release that introduced true functional programming constructs to the language:

Lambda Expressions:
Treat functionality as data, passing behavior directly into methods for more concise, readable code.

List<String> list = Arrays.asList("a", "b", "c");
list.forEach(element -> System.out.println(element));

Stream API:
Process collections in a declarative, pipeline-oriented style—filtering, mapping, and reducing with ease.

List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);
int sum = numbers.stream()
                 .filter(n -> n % 2 == 0)
                 .mapToInt(Integer::intValue)
                 .sum();

Default Methods in Interfaces:
Add new methods to interfaces without breaking existing implementations, enabling library evolution.

Java 11:
Released in September 2018 as a Long‑Term Support (LTS) version, Java11 modernized I/O and refined syntax:

HTTP Client API
A new, fluent API (sync and async) to replace the legacy HttpURLConnection.

HttpClient client = HttpClient.newHttpClient();
HttpRequest request = HttpRequest.newBuilder()
    .uri(URI.create("https://example.com"))
    .build();
HttpResponse<String> response =
    client.send(request, BodyHandlers.ofString());
System.out.println(response.body());

var in Lambda Parameters:
Use local‑variable type inference (var) for lambda parameters, improving consistency with local declarations:

BiFunction<Integer, Integer, Integer> sum = (var x, var y) -> x + y;

Java 12:
Released in March 2019 as a feature‑release (non‑LTS), Java12 introduced experimental and preview features:

Switch Expressions (Preview):
Treat switch as an expression that returns a value, with concise -> labels and optional yield:

int day = 2;
String dayType = switch (day) {
    case 1, 2, 3, 4, 5 -> "Weekday";
    case 6, 7       -> "Weekend";
    default         -> "Invalid day";
};

System.out.println(dayType);
Shenandoah GC (Experimental)

A low‑pause garbage collector targeting large heaps and minimal stop‑the‑world pauses.

Java 14:
Released in March 2020 (non‑LTS), Java14 finalized several preview features:

Switch Expressions (Standard):
The previewed switch expressions from Java12 were refined and officially added to the language.

The syntax remains the same, with yield used for multi‑statement branches when necessary.


Evolution in a Nutshell:
Java8: Brought functional paradigms—lambdas, streams, and interface evolution.

Java11: Modernized HTTP communication and allowed var in lambdas.

Java12: Previewed switch expressions and experimented with Shenandoah GC.

Java14: Cemented switch expressions as a core language feature.

Each release builds incrementally on its predecessors, enhancing expressiveness, performance, and modern API support.