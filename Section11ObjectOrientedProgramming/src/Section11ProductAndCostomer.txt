Why Do We Need this.itemNo = itemNo; in the Constructor?  

If you don‚Äôt use `this.itemNo = itemNo;` in the constructor, the instance variable (`itemNo`) won‚Äôt be assigned the value passed as a parameter.  

What Happens If We Don't Use `this`?

Take a look at this incorrect constructor:  

public Product(String itemNo) {
    itemNo = itemNo; // ‚ùå Wrong! This does nothing
}

```
Here, `itemNo = itemNo;` means the local variable (`itemNo`) is being assigned to itself.
  
‚û°Ô∏è This does not change the instance variable.**  

What Happens When We Use `this`?  

public Product(String itemNo) {
    this.itemNo = itemNo; // ‚úÖ Correct! Assigns parameter to instance variable
}

```
- `this.itemNo` refers to the instance variable of the class.
- `itemNo` (without `this`) refers to the local parameter passed to the constructor.
- `this.itemNo = itemNo;` assigns the constructor parameter to the instance variable.

Example: Without `this` (Incorrect Code)

class Product {
    private String itemNo;

    public Product(String itemNo) {
        itemNo = itemNo; // ‚ùå Wrong! This does nothing
    }

    public String getItemNo() {
        return itemNo;
    }
}

public class Main {
    public static void main(String[] args) {
        Product p = new Product("A25");
        System.out.println(p.getItemNo()); // ‚ùå Output: null (Wrong!)
    }
}

üõë Since the instance variable `itemNo` was never assigned, it remains `null`.

Example: With `this

class Product {
    private String itemNo;

    public Product(String itemNo) {
        this.itemNo = itemNo; // ‚úÖ Correct! Assigns parameter value to instance variable
    }

    public String getItemNo() {
        return itemNo;
    }
}

public class Main {
    public static void main(String[] args) {
        Product p = new Product("A25");
        System.out.println(p.getItemNo()); // ‚úÖ Output: A25 (Correct!)
    }
}
```
üü¢ Now, `getItemNo()` returns `"A25"` as expected.

Conclusion

When the parameter name is the same as the instance variable name, use `this` to refer to the instance variable.  
Without `this`, the assignment does nothing, leading to incorrect behavior (like getting `null`).