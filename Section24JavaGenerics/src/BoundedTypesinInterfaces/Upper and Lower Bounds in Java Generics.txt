Upper and Lower Bounds in Java Generics:

In Java Generics, bounded type parameters allow us to restrict the types that can be used as arguments for
type parameters (T).

Java provides two main types of bounds:
1. Upper Bounded (? extends T) ‚Äì Restricts the type to be a subclass of T.
2. Lower Bounded (? super T) ‚Äì Restricts the type to be a superclass of T.


1Ô∏è‚É£ Upper Bounded Wildcards (? extends T):
The ? extends T wildcard ensures that the type argument is either T or a subclass of T.
This is useful when reading data but not modifying it.

üîπ Use Case: When you want to read data but not modify it.

Example: Sum of Numbers

import java.util.List;
class UpperBoundExample {
    static double sumOfNumbers(List<? extends Number> list) {
        double sum = 0.0;
        for (Number num : list) {
            sum += num.doubleValue(); // Works for Integer, Double, Float, etc.
        }
        return sum;
    }
    public static void main(String[] args) {
        List<Integer> intList = List.of(1, 2, 3);
        List<Double> doubleList = List.of(1.1, 2.2, 3.3);
        
        System.out.println("Sum of Integers: " + sumOfNumbers(intList));
        System.out.println("Sum of Doubles: " + sumOfNumbers(doubleList));
    }
}

Output:
Sum of Integers: 6.0
Sum of Doubles: 6.6

Key Points:
- The method sumOfNumbers() works with any subtype of Number (e.g., Integer, Double, Float).
- We can read elements (num.doubleValue()) but cannot add new elements (except null).

2Ô∏è‚É£ Lower Bounded Wildcards (? super T)
The ? super T wildcard ensures that the type argument is either T or a superclass of T.
This is useful when adding data but not reading it in a specific type.

üîπ Use Case: When you want to write data, ensuring elements are of a certain type or its superclass.

Example: Adding Integers to a List:

import java.util.List;
import java.util.ArrayList;

class LowerBoundExample {
    static void addNumbers(List<? super Integer> list) {
        list.add(10);
        list.add(20);
        list.add(30);
        // list.add(3.5);  // ‚ùå Compilation Error! Only Integer or its superclasses allowed
    }
    public static void main(String[] args) {
        List<Number> numList = new ArrayList<>();
        addNumbers(numList);  // Works with Number (superclass of Integer)
        System.out.println(numList);
    }
}

Output:
[10, 20, 30]

Key Points:
- The method addNumbers() ensures that only Integer or its superclasses (Number, Object) can be used.
- We can add elements of type Integer, but reading requires explicit casting.
- This prevents accidental modifications with incompatible types.

Difference Between Upper and Lower Bounded Wildcards:

| Feature           | ? extends T (Upper Bound)                  | ? super T (Lower Bound)            |
|-------------------|--------------------------------------------|------------------------------------|
| Restriction       | T or any subclass (downward view)          | T or any superclass (upward view)  |
| Use Case          | Safe for reading (covariant)               | Safe for writing (contravariant)   |
| Example           | List<? extends Number> ‚Üí Integer, Double   | List<? super Integer> ‚Üí Number, Object |
| Can Add Elements? | ‚ùå No (except null)                        | ‚úÖ Yes (T or its subclasses)       |
| Can Read Elements?| ‚úÖ Yes (as T)                              | ‚ùå No (only as Object)             |

4Ô∏è‚É£ Example Using Both Upper and Lower Bounds

import java.util.ArrayList;
import java.util.List;

class BoundedExample {
    static void processNumbers(List<? extends Number> readList, List<? super Integer> writeList) {
        for (Number num : readList) {
            System.out.println("Processing: " + num);
            writeList.add(num.intValue()); // Adding to lower-bounded list
        }
    }

    public static void main(String[] args) {
        List<Double> doubles = List.of(1.1, 2.2, 3.3);
        List<Number> numbers = new ArrayList<>();

        processNumbers(doubles, numbers);  // ‚úÖ Upper and Lower Bounds in Action
        System.out.println("Numbers List: " + numbers);
    }
}

Output:
Processing: 1.1
Processing: 2.2
Processing: 3.3
Numbers List: [1, 2, 3]

5Ô∏è‚É£ When to Use Upper and Lower Bounds?
- Use ? extends T (Upper Bound) when you need to read elements but not modify them.
- Use ? super T (Lower Bound) when you need to write elements but don‚Äôt care about reading.

Conclusion:
- Upper Bounded Wildcards (? extends T) ‚Äì Use when you need to read data.
- Lower Bounded Wildcards (? super T) ‚Äì Use when you need to write data.
- Avoid using both in the same method unless necessary, as it may lead to ambiguity.

bounded type parameters:
<T extends Number> in classes and methods
