How Does Distributed Locking Work?

1. A centralized system (like Redis, Zookeeper, or DynamoDB) manages the locks.
2. Before modifying data, a server requests a lock.
3. If the lock is available, the server gets exclusive access.
4. Once the operation is complete, the lock is released so another server can proceed.

Popular Distributed Locking Techniques

1. Redis-based Locks (RedLock Algorithm)
   - Used in Uber, Netflix, and Amazon to ensure that no two servers process the same request.

2. Zookeeper-based Locks
   - Used in banking systems to manage transactions across multiple servers.

3. DynamoDB Locks
   - Used in AWS cloud systems for managing database updates in high-traffic applications.

Real-world Example:

When booking a flight online, multiple users from different locations may try to book the last available seat.

Distributed locking ensures that only one person gets the seat while others get a “Sold Out” message.

Key Takeaways for Interviews

1. Deadlocks – Avoid them using fixed lock ordering, timeouts, or deadlock detection mechanisms.
2. Optimistic Locking – Ideal for high-speed applications like stock trading and e-commerce.
3. Distributed Locking – Essential for cloud-based systems to prevent conflicts between multiple servers.

comparison between Optimistic vs Pessimistic Locking or an explanation of lock-free concurrency.