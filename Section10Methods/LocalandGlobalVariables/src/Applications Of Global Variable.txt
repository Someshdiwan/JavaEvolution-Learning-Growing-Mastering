Applications of Global (Static) Variables:

Global variables are used when data needs to be shared across all instances of a class.

Example Use Cases:

1. Configuration Settings
Example: Database URL, API keys, default settings
Used for global access without creating multiple instances.

2. Counting Total Objects Created
Example: Tracking the total number of users/accounts created

class User {
    private String username;
    static int userCount = 0;  // Global variable

    public User(String username) {
        this.username = username;
        userCount++;  // Increase count every time an object is created
    }
}

This helps in monitoring the total number of active users in a system.

3. Managing Shared Resources
Example: Keeping track of memory usage, connections in a database pool.

4. Company or Application-wide Constants
Example: Tax rates, interest rates, currency exchange rates

class Bank {
    static double interestRate = 5.5;  // Global variable for all bank accounts
}
Used when all instances share the same fixed value.

5. Logging and Debugging
Example: Global logging framework

class Logger {
    static boolean isDebugMode = true;  // Turn debugging on/off globally
}
This helps enable or disable logs for the entire application.

6. Game Development (Game Constants & Score Tracking)

Example:
Max Players Allowed (static int MAX_PLAYERS = 10;)
Global Scoreboard (static int highestScore;)

7. Shared Caches or Buffers
Example: Singleton Design Pattern (Ensuring only one instance of a class is created).

class DatabaseConnection {
    private static DatabaseConnection instance; // Global shared instance

    private DatabaseConnection() {} // Private constructor to prevent multiple instances

    public static DatabaseConnection getInstance() {
        if (instance == null) {
            instance = new DatabaseConnection();
        }
        return instance;
    }
}

Used in databases to prevent multiple connections from being created.
